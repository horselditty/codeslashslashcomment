Type classes are an idea originally from Haskell that you can implement in Scala via implicit parameters. This is not new or obscure, but so useful that another post just demonstrating the basics can't hurt. I will keep this brief -- I have a lot to say about type classes, but first the basic idea needs to be extremely solid.

Let's get imports out of the way.

[sourcecode language="scala"]
import org.scalacheck._
import org.scalacheck.Prop._
import org.scalacheck.Gen._
[/sourcecode]

Suppose I create a type such as a major-minor version scheme, or some such. It doesn't really matter for this example.

[sourcecode language="scala"]
case class Version(major: Int, minor: Int)
[/sourcecode]

And suppose I want to serialize and deserialize it. To do this with a type class, I create a trait <code>Serialize[T]</code> that provides the ability to serialize/deserialize any value of type <code>T</code>. Implicit values implementing this trait <em>instances</em> of the type class. (I prefix the methods with underscore to avoid name conflicts later, and this is not going to bother anyone because <em>you should never call these methods directly</em>. This is an entirely optional stylistic choice.)

[sourcecode language="scala"]
trait Serialize[T] {
  def _serialize(v:T) : String
  def _deserialize(s:String) : Option[T] // May fail. In a robust implementation, we'd return Either[T, ReasonItFailed]
}
[/sourcecode]

Next, I define functions that utilize this trait. These are the <em>methods</em> of the type class. A typical place for them is in the companion object. I also include a <a href="http://code.google.com/p/scalacheck/">ScalaCheck</a> property that should hold of any instance of the type class.

[sourcecode language="scala"]
object Serialize {
  def serialize[T](v: T)(implicit instance: Serialize[T]) =
    instance._serialize(v)
  
  def deserialize[T](s: String)(implicit instance: Serialize[T]) =
    instance._deserialize(s)

  def deserializeSerialize[T](v: T)(implicit instance: Serialize[T]) : Prop
    = (deserialize(serialize(v)) ?= Some(v))
}
[/sourcecode]

Now the type class is defined and I move on to instantiating it. In this case, I start by defining instances for standard types to build up to my own; this is common. Often instances for the standard types will also be shipped with the type class in the same companion object, but here they are in a totally separate module (if you are a seasoned OO programmer, this should already blow your mind a little). I'm actually not trying to make this robust, as you will generally want to go through an intermediate format such as JSON or XML which is more trivially compositional.

[sourcecode language="scala"]
object SerializeInstances {
  import Serialize._

  implicit object serializeString extends Serialize[String] {
    def _serialize(v: String) = v
    def _deserialize(s: String) = Some(s)
  }

  implicit object serializeInt extends Serialize[Int] {
    def _serialize(v: Int) = v.toString
    def _deserialize(s: String) =
      try { Some(s.toInt) } catch { case _ => None }
  }

  implicit def serializeTuple2[A, B]
    (implicit l: Serialize[A], r: Serialize[B]) = new Serialize[(A, B)] {

      def escape(s: String) = s.replaceAll("&", "&amp;")
                               .replaceAll(",", "&comma;")

      def unescape(s: String) = s.replaceAll("&comma;", ",")
                                 .replaceAll("&amp;", "&")

      def _serialize(v: (A, B)) = 
        escape(serialize(v._1)) + "," + escape(serialize(v._2))

      def _deserialize(s: String) =
        s.split(",", -1).toList match {
          case leftS :: rightS :: Nil => {
            for(left <- deserialize[A](unescape(leftS));
                right <- deserialize[B](unescape(rightS)))
            yield (left, right)
          }
          case _ => None
        }
    }
}
[/sourcecode]

Now I do a quick check (oblique pun intended) that the property holds via the <code>sbt</code> console.

[sourcecode language="scala"]
xsbt console

scala> import Serialize._
import Serialize._

scala> import SerializeInstances._
import SerializeInstances._

scala> import org.scalacheck.Prop._
import org.scalacheck.Prop._

scala> forAll(deserializeSerialize[String] _) check
+ OK, passed 100 tests.

scala> forAll(deserializeSerialize[Int] _) check
+ OK, passed 100 tests.

scala> forAll(deserializeSerialize[(Int, String)] _) check
+ OK, passed 100 tests.

scala> forAll(deserializeSerialize[((String, Int), (Int, (Int, Int)))] _).check
+ OK, passed 100 tests.
[/sourcecode]

In a real project, you probably want to use <a href="http://www.scalatest.org/">ScalaTest</a> to manage a suite of tests. I tend to mix in <code>Spec with Checkers</code>.

Coming back to the <code>Version</code> type, we make a <code>Serialize</code> instance for it. To test it, we also need to make an instance of <code>Arbitrary</code> - ScalaCheck is a key example of a great library built on type classes. Note how in a brief and simple line I define a fuzz test generator (<code>org.scalacheck.Gen[Version]</code>) and wrap it into an <code>Arbitrary[Version]</code> instance.

[sourcecode language="scala"]
object Version {
  import Serialize._
  import SerializeInstances._

  implicit def arbVersion =
    Arbitrary[Version] { resultOf(Version.apply _) }

  implicit object serializeVersion extends Serialize[Version] {
    def _serialize(v: Version) = Serialize.serialize(v.major, v.minor)
    def _deserialize(s: String) = {
      for((major, minor) <- deserialize[(Int, Int)](s))
      yield Version(major, minor)
    }
  }
}
[/sourcecode]

And check the property for this instance:

[sourcecode language="scala"]
xsbt console

...

scala> import Version._
import Version._

scala> forAll(deserializeSerialize[Version] _) check
+ OK, passed 100 tests.
[/sourcecode]

There are a couple of reasonable interpretations of the definition / instantiation of type classes:

<ol>
<li>A type class is an <em>interface</em> that a static type may implement. The implicit parameter is the method table.</li>
<li>A type class is a <em>property</em> that may hold of a static type. The implicit parameter is how we get the Scala compiler to <em>infer</em> that the type has this property and provide <em>evidence</em>.</li>
</ol>

Both of the above make sense with the alternate syntax that Scala allows for implicit parameters used in this style: "<code>def foo[T](implicit instance: Serialize[T])</code>" may be shortened to "<code>def foo[T: Serialize]</code>". In the latter syntax, you cannot actually name and call the methods of the instance; it is simply makes it possible to call <code>serialize</code> and <code>deserialize</code> by bringing the type class instance into scope.

There are huge number of advantages to type classes over simply implementing a trait. Here are some easily tangible ones:

<ol>
<li>The <code>Version</code> type did not have to know about the serialization or deserialization code. In many real-world scenarios the instance may actually be provided by a separate library. This is probably the number one reason to use type classes. They introduce a form of code decoupling and reuse that simply does not exist without them.</li>
<li>The Scala compiler automatically derives serialization/deserialization for tuples. Inferring instances for lists, etc, is just as easy. In a type class based project, the compiler writes a <em>ton</em> of code for you.</li>
<li>I was able to implement <code>deserialize</code> in the same type class and <code>serialize</code>. This cannot be done by implementing an interface as in "<code>case class Version(...) extends Serializable</code>" because the method is selected by the <em>return</em> type -- it is obviously not an appropriate method of <code>String</code>!. In a more Java-esque world, you tend to have a separate -- extraneous, in light of this -- interface for a factory. For the logically inclined: Java-style OO has an unfortunate asymmetry between introduction and elimination forms.</li>
</ol>

As a side note, having the scalacheck property helps to avoid the black hole of defensive programming, where you carefully check for errors and unexpected results. Instead, you can enjoy what I like to call <em>offensive programming</em> (pun definitely intended) where you blithely assume your tests have covered all corner cases.

Should you like to see more examples and explanations:
<ul>
<li>An academic paper, perhaps the origination of the idea in Scala: <a href="http://ropas.snu.ac.kr/~bruno/papers/TypeClasses.pdf">Type Classes as Objects and Implicits</a> by Oliviera,Â Moors, and Odersky.</li>
<li><a href="http://code.google.com/p/scalacheck/">ScalaCheck</a> uses type classes heavily to make it easy to build test case generators.</li>
<li><a href="http://code.google.com/p/scalaz/">Scalaz</a> includes tons of type classes and instances, and much more.</li>
<li><a href="https://github.com/lift/framework/tree/master/core/json-scalaz">json-scalaz</a> uses JSONR / JSONW / JSON type classes, which I'm going to write about later.</li>
<li><a href="https://github.com/inkling/scala-relaxng">scala-relaxng</a>, authored by yours truly at Inkling, uses a pretty-printing typeclass to test the parser on arbitrary rnc schemas, somewhat like this post.</li>
<li>Countless blog posts. Search for them and enjoy!</li>
</ul>

